/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.worldpay.innovation.wpwithin.rpc.types;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-04")
public class Price implements org.apache.thrift.TBase<Price, Price._Fields>, java.io.Serializable, Cloneable, Comparable<Price> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Price");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_PER_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pricePerUnit", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UNIT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unitDescription", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PriceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PriceTupleSchemeFactory();

  public int id; // required
  public java.lang.String description; // required
  public PricePerUnit pricePerUnit; // required
  public int unitId; // required
  public java.lang.String unitDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DESCRIPTION((short)2, "description"),
    PRICE_PER_UNIT((short)3, "pricePerUnit"),
    UNIT_ID((short)4, "unitId"),
    UNIT_DESCRIPTION((short)5, "unitDescription");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // PRICE_PER_UNIT
          return PRICE_PER_UNIT;
        case 4: // UNIT_ID
          return UNIT_ID;
        case 5: // UNIT_DESCRIPTION
          return UNIT_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UNITID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_PER_UNIT, new org.apache.thrift.meta_data.FieldMetaData("pricePerUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PricePerUnit.class)));
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("unitDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Price.class, metaDataMap);
  }

  public Price() {
  }

  public Price(
    int id,
    java.lang.String description,
    PricePerUnit pricePerUnit,
    int unitId,
    java.lang.String unitDescription)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.description = description;
    this.pricePerUnit = pricePerUnit;
    this.unitId = unitId;
    setUnitIdIsSet(true);
    this.unitDescription = unitDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Price(Price other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetPricePerUnit()) {
      this.pricePerUnit = new PricePerUnit(other.pricePerUnit);
    }
    this.unitId = other.unitId;
    if (other.isSetUnitDescription()) {
      this.unitDescription = other.unitDescription;
    }
  }

  public Price deepCopy() {
    return new Price(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.description = null;
    this.pricePerUnit = null;
    setUnitIdIsSet(false);
    this.unitId = 0;
    this.unitDescription = null;
  }

  public int getId() {
    return this.id;
  }

  public Price setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public Price setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public PricePerUnit getPricePerUnit() {
    return this.pricePerUnit;
  }

  public Price setPricePerUnit(PricePerUnit pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
    return this;
  }

  public void unsetPricePerUnit() {
    this.pricePerUnit = null;
  }

  /** Returns true if field pricePerUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPricePerUnit() {
    return this.pricePerUnit != null;
  }

  public void setPricePerUnitIsSet(boolean value) {
    if (!value) {
      this.pricePerUnit = null;
    }
  }

  public int getUnitId() {
    return this.unitId;
  }

  public Price setUnitId(int unitId) {
    this.unitId = unitId;
    setUnitIdIsSet(true);
    return this;
  }

  public void unsetUnitId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  public void setUnitIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITID_ISSET_ID, value);
  }

  public java.lang.String getUnitDescription() {
    return this.unitDescription;
  }

  public Price setUnitDescription(java.lang.String unitDescription) {
    this.unitDescription = unitDescription;
    return this;
  }

  public void unsetUnitDescription() {
    this.unitDescription = null;
  }

  /** Returns true if field unitDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitDescription() {
    return this.unitDescription != null;
  }

  public void setUnitDescriptionIsSet(boolean value) {
    if (!value) {
      this.unitDescription = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case PRICE_PER_UNIT:
      if (value == null) {
        unsetPricePerUnit();
      } else {
        setPricePerUnit((PricePerUnit)value);
      }
      break;

    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((java.lang.Integer)value);
      }
      break;

    case UNIT_DESCRIPTION:
      if (value == null) {
        unsetUnitDescription();
      } else {
        setUnitDescription((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DESCRIPTION:
      return getDescription();

    case PRICE_PER_UNIT:
      return getPricePerUnit();

    case UNIT_ID:
      return getUnitId();

    case UNIT_DESCRIPTION:
      return getUnitDescription();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DESCRIPTION:
      return isSetDescription();
    case PRICE_PER_UNIT:
      return isSetPricePerUnit();
    case UNIT_ID:
      return isSetUnitId();
    case UNIT_DESCRIPTION:
      return isSetUnitDescription();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Price)
      return this.equals((Price)that);
    return false;
  }

  public boolean equals(Price that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_pricePerUnit = true && this.isSetPricePerUnit();
    boolean that_present_pricePerUnit = true && that.isSetPricePerUnit();
    if (this_present_pricePerUnit || that_present_pricePerUnit) {
      if (!(this_present_pricePerUnit && that_present_pricePerUnit))
        return false;
      if (!this.pricePerUnit.equals(that.pricePerUnit))
        return false;
    }

    boolean this_present_unitId = true;
    boolean that_present_unitId = true;
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (this.unitId != that.unitId)
        return false;
    }

    boolean this_present_unitDescription = true && this.isSetUnitDescription();
    boolean that_present_unitDescription = true && that.isSetUnitDescription();
    if (this_present_unitDescription || that_present_unitDescription) {
      if (!(this_present_unitDescription && that_present_unitDescription))
        return false;
      if (!this.unitDescription.equals(that.unitDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetPricePerUnit()) ? 131071 : 524287);
    if (isSetPricePerUnit())
      hashCode = hashCode * 8191 + pricePerUnit.hashCode();

    hashCode = hashCode * 8191 + unitId;

    hashCode = hashCode * 8191 + ((isSetUnitDescription()) ? 131071 : 524287);
    if (isSetUnitDescription())
      hashCode = hashCode * 8191 + unitDescription.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Price other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPricePerUnit()).compareTo(other.isSetPricePerUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPricePerUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pricePerUnit, other.pricePerUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnitDescription()).compareTo(other.isSetUnitDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitDescription, other.unitDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Price(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pricePerUnit:");
    if (this.pricePerUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.pricePerUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitId:");
    sb.append(this.unitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitDescription:");
    if (this.unitDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.unitDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pricePerUnit != null) {
      pricePerUnit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PriceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PriceStandardScheme getScheme() {
      return new PriceStandardScheme();
    }
  }

  private static class PriceStandardScheme extends org.apache.thrift.scheme.StandardScheme<Price> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Price struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_PER_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pricePerUnit = new PricePerUnit();
              struct.pricePerUnit.read(iprot);
              struct.setPricePerUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unitId = iprot.readI32();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UNIT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitDescription = iprot.readString();
              struct.setUnitDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Price struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.pricePerUnit != null) {
        oprot.writeFieldBegin(PRICE_PER_UNIT_FIELD_DESC);
        struct.pricePerUnit.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
      oprot.writeI32(struct.unitId);
      oprot.writeFieldEnd();
      if (struct.unitDescription != null) {
        oprot.writeFieldBegin(UNIT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.unitDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PriceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PriceTupleScheme getScheme() {
      return new PriceTupleScheme();
    }
  }

  private static class PriceTupleScheme extends org.apache.thrift.scheme.TupleScheme<Price> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Price struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetPricePerUnit()) {
        optionals.set(2);
      }
      if (struct.isSetUnitId()) {
        optionals.set(3);
      }
      if (struct.isSetUnitDescription()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetPricePerUnit()) {
        struct.pricePerUnit.write(oprot);
      }
      if (struct.isSetUnitId()) {
        oprot.writeI32(struct.unitId);
      }
      if (struct.isSetUnitDescription()) {
        oprot.writeString(struct.unitDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Price struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pricePerUnit = new PricePerUnit();
        struct.pricePerUnit.read(iprot);
        struct.setPricePerUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unitId = iprot.readI32();
        struct.setUnitIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.unitDescription = iprot.readString();
        struct.setUnitDescriptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

