/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.worldpay.innovation.wpwithin.rpc.types;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-04")
public class TotalPriceResponse implements org.apache.thrift.TBase<TotalPriceResponse, TotalPriceResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TotalPriceResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TotalPriceResponse");

  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("priceId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UNITS_TO_SUPPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("unitsToSupply", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAYMENT_REFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentReferenceId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_CLIENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantClientKey", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyCode", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TotalPriceResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TotalPriceResponseTupleSchemeFactory();

  public java.lang.String serverId; // required
  public java.lang.String clientId; // required
  public int priceId; // required
  public int unitsToSupply; // required
  public int totalPrice; // required
  public java.lang.String paymentReferenceId; // required
  public java.lang.String merchantClientKey; // required
  public java.lang.String currencyCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_ID((short)1, "serverId"),
    CLIENT_ID((short)2, "clientId"),
    PRICE_ID((short)3, "priceId"),
    UNITS_TO_SUPPLY((short)4, "unitsToSupply"),
    TOTAL_PRICE((short)5, "totalPrice"),
    PAYMENT_REFERENCE_ID((short)6, "paymentReferenceId"),
    MERCHANT_CLIENT_KEY((short)7, "merchantClientKey"),
    CURRENCY_CODE((short)8, "currencyCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_ID
          return SERVER_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // PRICE_ID
          return PRICE_ID;
        case 4: // UNITS_TO_SUPPLY
          return UNITS_TO_SUPPLY;
        case 5: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 6: // PAYMENT_REFERENCE_ID
          return PAYMENT_REFERENCE_ID;
        case 7: // MERCHANT_CLIENT_KEY
          return MERCHANT_CLIENT_KEY;
        case 8: // CURRENCY_CODE
          return CURRENCY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICEID_ISSET_ID = 0;
  private static final int __UNITSTOSUPPLY_ISSET_ID = 1;
  private static final int __TOTALPRICE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_ID, new org.apache.thrift.meta_data.FieldMetaData("priceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNITS_TO_SUPPLY, new org.apache.thrift.meta_data.FieldMetaData("unitsToSupply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_REFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentReferenceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_CLIENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("merchantClientKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY_CODE, new org.apache.thrift.meta_data.FieldMetaData("currencyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TotalPriceResponse.class, metaDataMap);
  }

  public TotalPriceResponse() {
  }

  public TotalPriceResponse(
    java.lang.String serverId,
    java.lang.String clientId,
    int priceId,
    int unitsToSupply,
    int totalPrice,
    java.lang.String paymentReferenceId,
    java.lang.String merchantClientKey,
    java.lang.String currencyCode)
  {
    this();
    this.serverId = serverId;
    this.clientId = clientId;
    this.priceId = priceId;
    setPriceIdIsSet(true);
    this.unitsToSupply = unitsToSupply;
    setUnitsToSupplyIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.paymentReferenceId = paymentReferenceId;
    this.merchantClientKey = merchantClientKey;
    this.currencyCode = currencyCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TotalPriceResponse(TotalPriceResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServerId()) {
      this.serverId = other.serverId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.priceId = other.priceId;
    this.unitsToSupply = other.unitsToSupply;
    this.totalPrice = other.totalPrice;
    if (other.isSetPaymentReferenceId()) {
      this.paymentReferenceId = other.paymentReferenceId;
    }
    if (other.isSetMerchantClientKey()) {
      this.merchantClientKey = other.merchantClientKey;
    }
    if (other.isSetCurrencyCode()) {
      this.currencyCode = other.currencyCode;
    }
  }

  public TotalPriceResponse deepCopy() {
    return new TotalPriceResponse(this);
  }

  @Override
  public void clear() {
    this.serverId = null;
    this.clientId = null;
    setPriceIdIsSet(false);
    this.priceId = 0;
    setUnitsToSupplyIsSet(false);
    this.unitsToSupply = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0;
    this.paymentReferenceId = null;
    this.merchantClientKey = null;
    this.currencyCode = null;
  }

  public java.lang.String getServerId() {
    return this.serverId;
  }

  public TotalPriceResponse setServerId(java.lang.String serverId) {
    this.serverId = serverId;
    return this;
  }

  public void unsetServerId() {
    this.serverId = null;
  }

  /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
  public boolean isSetServerId() {
    return this.serverId != null;
  }

  public void setServerIdIsSet(boolean value) {
    if (!value) {
      this.serverId = null;
    }
  }

  public java.lang.String getClientId() {
    return this.clientId;
  }

  public TotalPriceResponse setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public int getPriceId() {
    return this.priceId;
  }

  public TotalPriceResponse setPriceId(int priceId) {
    this.priceId = priceId;
    setPriceIdIsSet(true);
    return this;
  }

  public void unsetPriceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  /** Returns true if field priceId is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  public void setPriceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEID_ISSET_ID, value);
  }

  public int getUnitsToSupply() {
    return this.unitsToSupply;
  }

  public TotalPriceResponse setUnitsToSupply(int unitsToSupply) {
    this.unitsToSupply = unitsToSupply;
    setUnitsToSupplyIsSet(true);
    return this;
  }

  public void unsetUnitsToSupply() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID);
  }

  /** Returns true if field unitsToSupply is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitsToSupply() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID);
  }

  public void setUnitsToSupplyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID, value);
  }

  public int getTotalPrice() {
    return this.totalPrice;
  }

  public TotalPriceResponse setTotalPrice(int totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  public java.lang.String getPaymentReferenceId() {
    return this.paymentReferenceId;
  }

  public TotalPriceResponse setPaymentReferenceId(java.lang.String paymentReferenceId) {
    this.paymentReferenceId = paymentReferenceId;
    return this;
  }

  public void unsetPaymentReferenceId() {
    this.paymentReferenceId = null;
  }

  /** Returns true if field paymentReferenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentReferenceId() {
    return this.paymentReferenceId != null;
  }

  public void setPaymentReferenceIdIsSet(boolean value) {
    if (!value) {
      this.paymentReferenceId = null;
    }
  }

  public java.lang.String getMerchantClientKey() {
    return this.merchantClientKey;
  }

  public TotalPriceResponse setMerchantClientKey(java.lang.String merchantClientKey) {
    this.merchantClientKey = merchantClientKey;
    return this;
  }

  public void unsetMerchantClientKey() {
    this.merchantClientKey = null;
  }

  /** Returns true if field merchantClientKey is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantClientKey() {
    return this.merchantClientKey != null;
  }

  public void setMerchantClientKeyIsSet(boolean value) {
    if (!value) {
      this.merchantClientKey = null;
    }
  }

  public java.lang.String getCurrencyCode() {
    return this.currencyCode;
  }

  public TotalPriceResponse setCurrencyCode(java.lang.String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  public void unsetCurrencyCode() {
    this.currencyCode = null;
  }

  /** Returns true if field currencyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyCode() {
    return this.currencyCode != null;
  }

  public void setCurrencyCodeIsSet(boolean value) {
    if (!value) {
      this.currencyCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERVER_ID:
      if (value == null) {
        unsetServerId();
      } else {
        setServerId((java.lang.String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.String)value);
      }
      break;

    case PRICE_ID:
      if (value == null) {
        unsetPriceId();
      } else {
        setPriceId((java.lang.Integer)value);
      }
      break;

    case UNITS_TO_SUPPLY:
      if (value == null) {
        unsetUnitsToSupply();
      } else {
        setUnitsToSupply((java.lang.Integer)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((java.lang.Integer)value);
      }
      break;

    case PAYMENT_REFERENCE_ID:
      if (value == null) {
        unsetPaymentReferenceId();
      } else {
        setPaymentReferenceId((java.lang.String)value);
      }
      break;

    case MERCHANT_CLIENT_KEY:
      if (value == null) {
        unsetMerchantClientKey();
      } else {
        setMerchantClientKey((java.lang.String)value);
      }
      break;

    case CURRENCY_CODE:
      if (value == null) {
        unsetCurrencyCode();
      } else {
        setCurrencyCode((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_ID:
      return getServerId();

    case CLIENT_ID:
      return getClientId();

    case PRICE_ID:
      return getPriceId();

    case UNITS_TO_SUPPLY:
      return getUnitsToSupply();

    case TOTAL_PRICE:
      return getTotalPrice();

    case PAYMENT_REFERENCE_ID:
      return getPaymentReferenceId();

    case MERCHANT_CLIENT_KEY:
      return getMerchantClientKey();

    case CURRENCY_CODE:
      return getCurrencyCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_ID:
      return isSetServerId();
    case CLIENT_ID:
      return isSetClientId();
    case PRICE_ID:
      return isSetPriceId();
    case UNITS_TO_SUPPLY:
      return isSetUnitsToSupply();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case PAYMENT_REFERENCE_ID:
      return isSetPaymentReferenceId();
    case MERCHANT_CLIENT_KEY:
      return isSetMerchantClientKey();
    case CURRENCY_CODE:
      return isSetCurrencyCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TotalPriceResponse)
      return this.equals((TotalPriceResponse)that);
    return false;
  }

  public boolean equals(TotalPriceResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverId = true && this.isSetServerId();
    boolean that_present_serverId = true && that.isSetServerId();
    if (this_present_serverId || that_present_serverId) {
      if (!(this_present_serverId && that_present_serverId))
        return false;
      if (!this.serverId.equals(that.serverId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_priceId = true;
    boolean that_present_priceId = true;
    if (this_present_priceId || that_present_priceId) {
      if (!(this_present_priceId && that_present_priceId))
        return false;
      if (this.priceId != that.priceId)
        return false;
    }

    boolean this_present_unitsToSupply = true;
    boolean that_present_unitsToSupply = true;
    if (this_present_unitsToSupply || that_present_unitsToSupply) {
      if (!(this_present_unitsToSupply && that_present_unitsToSupply))
        return false;
      if (this.unitsToSupply != that.unitsToSupply)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_paymentReferenceId = true && this.isSetPaymentReferenceId();
    boolean that_present_paymentReferenceId = true && that.isSetPaymentReferenceId();
    if (this_present_paymentReferenceId || that_present_paymentReferenceId) {
      if (!(this_present_paymentReferenceId && that_present_paymentReferenceId))
        return false;
      if (!this.paymentReferenceId.equals(that.paymentReferenceId))
        return false;
    }

    boolean this_present_merchantClientKey = true && this.isSetMerchantClientKey();
    boolean that_present_merchantClientKey = true && that.isSetMerchantClientKey();
    if (this_present_merchantClientKey || that_present_merchantClientKey) {
      if (!(this_present_merchantClientKey && that_present_merchantClientKey))
        return false;
      if (!this.merchantClientKey.equals(that.merchantClientKey))
        return false;
    }

    boolean this_present_currencyCode = true && this.isSetCurrencyCode();
    boolean that_present_currencyCode = true && that.isSetCurrencyCode();
    if (this_present_currencyCode || that_present_currencyCode) {
      if (!(this_present_currencyCode && that_present_currencyCode))
        return false;
      if (!this.currencyCode.equals(that.currencyCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServerId()) ? 131071 : 524287);
    if (isSetServerId())
      hashCode = hashCode * 8191 + serverId.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + priceId;

    hashCode = hashCode * 8191 + unitsToSupply;

    hashCode = hashCode * 8191 + totalPrice;

    hashCode = hashCode * 8191 + ((isSetPaymentReferenceId()) ? 131071 : 524287);
    if (isSetPaymentReferenceId())
      hashCode = hashCode * 8191 + paymentReferenceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetMerchantClientKey()) ? 131071 : 524287);
    if (isSetMerchantClientKey())
      hashCode = hashCode * 8191 + merchantClientKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrencyCode()) ? 131071 : 524287);
    if (isSetCurrencyCode())
      hashCode = hashCode * 8191 + currencyCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TotalPriceResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriceId()).compareTo(other.isSetPriceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceId, other.priceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnitsToSupply()).compareTo(other.isSetUnitsToSupply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitsToSupply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitsToSupply, other.unitsToSupply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaymentReferenceId()).compareTo(other.isSetPaymentReferenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentReferenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentReferenceId, other.paymentReferenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerchantClientKey()).compareTo(other.isSetMerchantClientKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantClientKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantClientKey, other.merchantClientKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrencyCode()).compareTo(other.isSetCurrencyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyCode, other.currencyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TotalPriceResponse(");
    boolean first = true;

    sb.append("serverId:");
    if (this.serverId == null) {
      sb.append("null");
    } else {
      sb.append(this.serverId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceId:");
    sb.append(this.priceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitsToSupply:");
    sb.append(this.unitsToSupply);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentReferenceId:");
    if (this.paymentReferenceId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentReferenceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantClientKey:");
    if (this.merchantClientKey == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantClientKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyCode:");
    if (this.currencyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TotalPriceResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TotalPriceResponseStandardScheme getScheme() {
      return new TotalPriceResponseStandardScheme();
    }
  }

  private static class TotalPriceResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TotalPriceResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TotalPriceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverId = iprot.readString();
              struct.setServerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceId = iprot.readI32();
              struct.setPriceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNITS_TO_SUPPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unitsToSupply = iprot.readI32();
              struct.setUnitsToSupplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPrice = iprot.readI32();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYMENT_REFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentReferenceId = iprot.readString();
              struct.setPaymentReferenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_CLIENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantClientKey = iprot.readString();
              struct.setMerchantClientKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENCY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyCode = iprot.readString();
              struct.setCurrencyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TotalPriceResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverId != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_ID_FIELD_DESC);
      oprot.writeI32(struct.priceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNITS_TO_SUPPLY_FIELD_DESC);
      oprot.writeI32(struct.unitsToSupply);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeI32(struct.totalPrice);
      oprot.writeFieldEnd();
      if (struct.paymentReferenceId != null) {
        oprot.writeFieldBegin(PAYMENT_REFERENCE_ID_FIELD_DESC);
        oprot.writeString(struct.paymentReferenceId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantClientKey != null) {
        oprot.writeFieldBegin(MERCHANT_CLIENT_KEY_FIELD_DESC);
        oprot.writeString(struct.merchantClientKey);
        oprot.writeFieldEnd();
      }
      if (struct.currencyCode != null) {
        oprot.writeFieldBegin(CURRENCY_CODE_FIELD_DESC);
        oprot.writeString(struct.currencyCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TotalPriceResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TotalPriceResponseTupleScheme getScheme() {
      return new TotalPriceResponseTupleScheme();
    }
  }

  private static class TotalPriceResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TotalPriceResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TotalPriceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServerId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetPriceId()) {
        optionals.set(2);
      }
      if (struct.isSetUnitsToSupply()) {
        optionals.set(3);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(4);
      }
      if (struct.isSetPaymentReferenceId()) {
        optionals.set(5);
      }
      if (struct.isSetMerchantClientKey()) {
        optionals.set(6);
      }
      if (struct.isSetCurrencyCode()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetServerId()) {
        oprot.writeString(struct.serverId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetPriceId()) {
        oprot.writeI32(struct.priceId);
      }
      if (struct.isSetUnitsToSupply()) {
        oprot.writeI32(struct.unitsToSupply);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeI32(struct.totalPrice);
      }
      if (struct.isSetPaymentReferenceId()) {
        oprot.writeString(struct.paymentReferenceId);
      }
      if (struct.isSetMerchantClientKey()) {
        oprot.writeString(struct.merchantClientKey);
      }
      if (struct.isSetCurrencyCode()) {
        oprot.writeString(struct.currencyCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TotalPriceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.serverId = iprot.readString();
        struct.setServerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.priceId = iprot.readI32();
        struct.setPriceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unitsToSupply = iprot.readI32();
        struct.setUnitsToSupplyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalPrice = iprot.readI32();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paymentReferenceId = iprot.readString();
        struct.setPaymentReferenceIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.merchantClientKey = iprot.readString();
        struct.setMerchantClientKeyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currencyCode = iprot.readString();
        struct.setCurrencyCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

