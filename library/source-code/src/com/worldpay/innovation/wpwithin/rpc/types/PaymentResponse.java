/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.worldpay.innovation.wpwithin.rpc.types;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-04")
public class PaymentResponse implements org.apache.thrift.TBase<PaymentResponse, PaymentResponse._Fields>, java.io.Serializable, Cloneable, Comparable<PaymentResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaymentResponse");

  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPaid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SERVICE_DELIVERY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDeliveryToken", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PaymentResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PaymentResponseTupleSchemeFactory();

  public java.lang.String serverId; // required
  public java.lang.String clientId; // required
  public int totalPaid; // required
  public ServiceDeliveryToken serviceDeliveryToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_ID((short)1, "serverId"),
    CLIENT_ID((short)2, "clientId"),
    TOTAL_PAID((short)3, "totalPaid"),
    SERVICE_DELIVERY_TOKEN((short)4, "serviceDeliveryToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_ID
          return SERVER_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // TOTAL_PAID
          return TOTAL_PAID;
        case 4: // SERVICE_DELIVERY_TOKEN
          return SERVICE_DELIVERY_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPAID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PAID, new org.apache.thrift.meta_data.FieldMetaData("totalPaid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_DELIVERY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("serviceDeliveryToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceDeliveryToken.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaymentResponse.class, metaDataMap);
  }

  public PaymentResponse() {
  }

  public PaymentResponse(
    java.lang.String serverId,
    java.lang.String clientId,
    int totalPaid,
    ServiceDeliveryToken serviceDeliveryToken)
  {
    this();
    this.serverId = serverId;
    this.clientId = clientId;
    this.totalPaid = totalPaid;
    setTotalPaidIsSet(true);
    this.serviceDeliveryToken = serviceDeliveryToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaymentResponse(PaymentResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServerId()) {
      this.serverId = other.serverId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.totalPaid = other.totalPaid;
    if (other.isSetServiceDeliveryToken()) {
      this.serviceDeliveryToken = new ServiceDeliveryToken(other.serviceDeliveryToken);
    }
  }

  public PaymentResponse deepCopy() {
    return new PaymentResponse(this);
  }

  @Override
  public void clear() {
    this.serverId = null;
    this.clientId = null;
    setTotalPaidIsSet(false);
    this.totalPaid = 0;
    this.serviceDeliveryToken = null;
  }

  public java.lang.String getServerId() {
    return this.serverId;
  }

  public PaymentResponse setServerId(java.lang.String serverId) {
    this.serverId = serverId;
    return this;
  }

  public void unsetServerId() {
    this.serverId = null;
  }

  /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
  public boolean isSetServerId() {
    return this.serverId != null;
  }

  public void setServerIdIsSet(boolean value) {
    if (!value) {
      this.serverId = null;
    }
  }

  public java.lang.String getClientId() {
    return this.clientId;
  }

  public PaymentResponse setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public int getTotalPaid() {
    return this.totalPaid;
  }

  public PaymentResponse setTotalPaid(int totalPaid) {
    this.totalPaid = totalPaid;
    setTotalPaidIsSet(true);
    return this;
  }

  public void unsetTotalPaid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPAID_ISSET_ID);
  }

  /** Returns true if field totalPaid is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPaid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPAID_ISSET_ID);
  }

  public void setTotalPaidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPAID_ISSET_ID, value);
  }

  public ServiceDeliveryToken getServiceDeliveryToken() {
    return this.serviceDeliveryToken;
  }

  public PaymentResponse setServiceDeliveryToken(ServiceDeliveryToken serviceDeliveryToken) {
    this.serviceDeliveryToken = serviceDeliveryToken;
    return this;
  }

  public void unsetServiceDeliveryToken() {
    this.serviceDeliveryToken = null;
  }

  /** Returns true if field serviceDeliveryToken is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceDeliveryToken() {
    return this.serviceDeliveryToken != null;
  }

  public void setServiceDeliveryTokenIsSet(boolean value) {
    if (!value) {
      this.serviceDeliveryToken = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERVER_ID:
      if (value == null) {
        unsetServerId();
      } else {
        setServerId((java.lang.String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.String)value);
      }
      break;

    case TOTAL_PAID:
      if (value == null) {
        unsetTotalPaid();
      } else {
        setTotalPaid((java.lang.Integer)value);
      }
      break;

    case SERVICE_DELIVERY_TOKEN:
      if (value == null) {
        unsetServiceDeliveryToken();
      } else {
        setServiceDeliveryToken((ServiceDeliveryToken)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_ID:
      return getServerId();

    case CLIENT_ID:
      return getClientId();

    case TOTAL_PAID:
      return getTotalPaid();

    case SERVICE_DELIVERY_TOKEN:
      return getServiceDeliveryToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_ID:
      return isSetServerId();
    case CLIENT_ID:
      return isSetClientId();
    case TOTAL_PAID:
      return isSetTotalPaid();
    case SERVICE_DELIVERY_TOKEN:
      return isSetServiceDeliveryToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PaymentResponse)
      return this.equals((PaymentResponse)that);
    return false;
  }

  public boolean equals(PaymentResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverId = true && this.isSetServerId();
    boolean that_present_serverId = true && that.isSetServerId();
    if (this_present_serverId || that_present_serverId) {
      if (!(this_present_serverId && that_present_serverId))
        return false;
      if (!this.serverId.equals(that.serverId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_totalPaid = true;
    boolean that_present_totalPaid = true;
    if (this_present_totalPaid || that_present_totalPaid) {
      if (!(this_present_totalPaid && that_present_totalPaid))
        return false;
      if (this.totalPaid != that.totalPaid)
        return false;
    }

    boolean this_present_serviceDeliveryToken = true && this.isSetServiceDeliveryToken();
    boolean that_present_serviceDeliveryToken = true && that.isSetServiceDeliveryToken();
    if (this_present_serviceDeliveryToken || that_present_serviceDeliveryToken) {
      if (!(this_present_serviceDeliveryToken && that_present_serviceDeliveryToken))
        return false;
      if (!this.serviceDeliveryToken.equals(that.serviceDeliveryToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServerId()) ? 131071 : 524287);
    if (isSetServerId())
      hashCode = hashCode * 8191 + serverId.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + totalPaid;

    hashCode = hashCode * 8191 + ((isSetServiceDeliveryToken()) ? 131071 : 524287);
    if (isSetServiceDeliveryToken())
      hashCode = hashCode * 8191 + serviceDeliveryToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PaymentResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalPaid()).compareTo(other.isSetTotalPaid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPaid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPaid, other.totalPaid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceDeliveryToken()).compareTo(other.isSetServiceDeliveryToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceDeliveryToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDeliveryToken, other.serviceDeliveryToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PaymentResponse(");
    boolean first = true;

    sb.append("serverId:");
    if (this.serverId == null) {
      sb.append("null");
    } else {
      sb.append(this.serverId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPaid:");
    sb.append(this.totalPaid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceDeliveryToken:");
    if (this.serviceDeliveryToken == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceDeliveryToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (serviceDeliveryToken != null) {
      serviceDeliveryToken.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaymentResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaymentResponseStandardScheme getScheme() {
      return new PaymentResponseStandardScheme();
    }
  }

  private static class PaymentResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<PaymentResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaymentResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverId = iprot.readString();
              struct.setServerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_PAID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPaid = iprot.readI32();
              struct.setTotalPaidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVICE_DELIVERY_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.serviceDeliveryToken = new ServiceDeliveryToken();
              struct.serviceDeliveryToken.read(iprot);
              struct.setServiceDeliveryTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaymentResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverId != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PAID_FIELD_DESC);
      oprot.writeI32(struct.totalPaid);
      oprot.writeFieldEnd();
      if (struct.serviceDeliveryToken != null) {
        oprot.writeFieldBegin(SERVICE_DELIVERY_TOKEN_FIELD_DESC);
        struct.serviceDeliveryToken.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaymentResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaymentResponseTupleScheme getScheme() {
      return new PaymentResponseTupleScheme();
    }
  }

  private static class PaymentResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<PaymentResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaymentResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServerId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetTotalPaid()) {
        optionals.set(2);
      }
      if (struct.isSetServiceDeliveryToken()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetServerId()) {
        oprot.writeString(struct.serverId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetTotalPaid()) {
        oprot.writeI32(struct.totalPaid);
      }
      if (struct.isSetServiceDeliveryToken()) {
        struct.serviceDeliveryToken.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaymentResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.serverId = iprot.readString();
        struct.setServerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalPaid = iprot.readI32();
        struct.setTotalPaidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serviceDeliveryToken = new ServiceDeliveryToken();
        struct.serviceDeliveryToken.read(iprot);
        struct.setServiceDeliveryTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

